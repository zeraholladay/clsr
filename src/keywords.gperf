// clang-format off
%{
#include <string.h>

#include "eval.h"
#include "eval_math.h"
#include "keywords.h"
#include "parser.h"
%}

%includes
%readonly-tables
%global-table
%define word-array-name keyword_table
%struct-type
%ignore-case
%define lookup-function-name keyword_lookup
%define initializer-suffix ,0,0,0
%define slot-name name

struct Keyword;

%%
APPLY,   eval_apply,    2,  PRIMITIVE
CONS,    eval_cons,     2,  PRIMITIVE
EQ,      eval_eq,       2,  PRIMITIVE
EVAL,    eval,          1,  PRIMITIVE
FIRST,   eval_first,    1,  PRIMITIVE
FUNCALL, eval_funcall, -1,  PRIMITIVE
IF,      NULL,          0,  IF
LAMBDA,  NULL,          0,  LAMBDA
LEN,     eval_len,      1,  PRIMITIVE
NIL,     NULL,          0,  NIL_
LIST,    eval_list,    -1,  PRIMITIVE
PAIR,    eval_pair,     2,  PRIMITIVE
PRINT,   eval_print,    1,  PRIMITIVE
QUOTE,   NULL,          0,  QUOTE
REST,    eval_rest,     1,  PRIMITIVE
SET,     eval_set,      2,  PRIMITIVE
STR,     eval_str,      1,  PRIMITIVE
T,       NULL,          0,  T_
ADD,     eval_add,     -1,  PRIMITIVE
SUB,     eval_sub,     -1,  PRIMITIVE
MUL,     eval_mul,     -1,  PRIMITIVE
DIV,     eval_div,     -1,  PRIMITIVE
%%

#define PRIN_FN_TAB_NUM                                                       \
  ((int)(sizeof (keyword_table) / sizeof (keyword_table[0])))

const char *
is_keyword_strncmp (const char *text, int state)
{
  static int idx;
  static size_t len;

  if (state == 0)
    {
      idx = 0;
      len = strlen (text);
    }

  while (idx < PRIN_FN_TAB_NUM)
    {
      const char *name = keyword_table[idx++].name;
      if (!strncasecmp (name, text, len))
        {
          return name;
        }
    }
  return NULL;
}
